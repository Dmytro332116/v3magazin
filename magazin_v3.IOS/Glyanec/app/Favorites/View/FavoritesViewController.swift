import UIKit
import WebKit

/// –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —á–µ—Ä–µ–∑ WebView
class FavoritesViewController: UIViewController, WKNavigationDelegate {

    private var webView: WKWebView!
    private var progressView: UIProgressView!
    
    private let favoritesURL = "https://v3magazin.glyanec.net/user/favorites"

    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "–°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫"
        view.backgroundColor = .systemBackground
        
        setupWebView()
        setupProgressBar()
        setupNavigationBar()
        
        print("‚úÖ [FavoritesVC] Initialized with WebView")
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // ‚úÖ –í–ê–ñ–õ–ò–í–û: –§—ñ–∫—Å—É—î–º–æ –∫–æ–ª—ñ—Ä –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (–∑–∞–≤–∂–¥–∏ —á–æ—Ä–Ω–∏–π)
        navigationController?.navigationBar.tintColor = .black
        navigationController?.navigationBar.isHidden = false
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–±—Ä–∞–Ω–æ–≥–æ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ
        loadFavoritesPage()
    }
    
    deinit {
        webView?.removeObserver(self, forKeyPath: "estimatedProgress")
    }
    
    // MARK: - Setup
    
    private func setupWebView() {
        let config = WKWebViewConfiguration()
        config.websiteDataStore = .default()  // –°–ø—ñ–ª—å–Ω—ñ cookies –∑ —ñ–Ω—à–∏–º–∏ WebView
        
        webView = WKWebView(frame: .zero, configuration: config)
        webView.navigationDelegate = self
        webView.translatesAutoresizingMaskIntoConstraints = false
        
        view.addSubview(webView)
        
        NSLayoutConstraint.activate([
            webView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            webView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            webView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            webView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        webView.addObserver(self, forKeyPath: "estimatedProgress", options: .new, context: nil)
    }
    
    private func setupProgressBar() {
        progressView = UIProgressView(progressViewStyle: .default)
        progressView.progressTintColor = UIColor.systemGreen
        progressView.trackTintColor = UIColor.systemGray5
        progressView.translatesAutoresizingMaskIntoConstraints = false
        progressView.isHidden = true
        
        view.addSubview(progressView)
        
        NSLayoutConstraint.activate([
            progressView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            progressView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            progressView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            progressView.heightAnchor.constraint(equalToConstant: 2)
        ])
    }
    
    private func setupNavigationBar() {
        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∞–±–æ —ñ–Ω—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
        navigationItem.leftBarButtonItem = UIBarButtonItem(
            image: UIImage(systemName: "chevron.left"),
            style: .plain,
            target: self,
            action: #selector(goBack)
        )
    }
    
    @objc private func goBack() {
        if webView.canGoBack {
            webView.goBack()
        } else {
            navigationController?.popViewController(animated: true)
        }
    }
    
    private func loadFavoritesPage() {
        guard let url = URL(string: favoritesURL) else {
            print("‚ùå [FavoritesVC] Invalid URL")
            return
        }
        
        print("üîÑ [FavoritesVC] Loading favorites page: \(favoritesURL)")
        webView.load(URLRequest(url: url))
    }
    
    // MARK: - Progress Observer
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?,
                               change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        guard keyPath == "estimatedProgress" else { return }
        
        progressView.isHidden = webView.estimatedProgress >= 1.0
        progressView.progress = Float(webView.estimatedProgress)
    }
    
    // MARK: - WKNavigationDelegate
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        print("‚úÖ [FavoritesVC] Page loaded: \(webView.url?.absoluteString ?? "unknown")")
    }
    
    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
        print("‚ùå [FavoritesVC] Failed to load: \(error.localizedDescription)")
    }
}
