import UIKit
import SDWebImage

protocol BasketItemCellDelegate: class {
    func removeItem(row: Int, itemTitle: String)
    func increaseQuantity(row: Int)
    func decreaseQuantity(row: Int)
}

class BasketItemCell: UITableViewCell {
    
    @IBOutlet weak var itemIV: UIImageView!
    @IBOutlet weak var favoriteB: UIButton!
    
    @IBOutlet weak var titleL: UILabel!
    @IBOutlet weak var priceL: UILabel!
    @IBOutlet weak var sumPriceL: UILabel!
    @IBOutlet weak var counterL: UILabel!
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (—Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ)
    private var decreaseButton: UIButton!
    private var increaseButton: UIButton!
    private var quantityStackView: UIStackView!
    
    // –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ç–æ (—è–∫ –Ω–∞ —Å–∞–π—Ç—ñ)
    private var deleteButton: UIButton!
    
    weak var delegate: BasketItemCellDelegate?
    var itemIndex: Int? = nil
    var currentItem: ItemBasketModel?
    
    override func awakeFromNib() {
        super.awakeFromNib()
        setupQuantityControls()
        setupDeleteButton()
    }
    
    private func setupDeleteButton() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è (—á–µ—Ä–≤–æ–Ω–µ –∫–æ–ª–æ –∑ –±—ñ–ª–æ—é —ñ–∫–æ–Ω–∫–æ—é —Å–º—ñ—Ç–Ω–∏–∫–∞)
        deleteButton = UIButton(type: .system)
        deleteButton.translatesAutoresizingMaskIntoConstraints = false
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ —Å–º—ñ—Ç–Ω–∏–∫–∞
        let trashIcon = UIImage(systemName: "trash.fill")
        deleteButton.setImage(trashIcon, for: .normal)
        deleteButton.tintColor = .white
        
        // –°—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
        deleteButton.backgroundColor = UIColor.systemRed
        deleteButton.layer.cornerRadius = 16  // –ü–æ–ª–æ–≤–∏–Ω–∞ –≤—ñ–¥ 32x32 = –∫—Ä—É–≥
        deleteButton.layer.shadowColor = UIColor.black.cgColor
        deleteButton.layer.shadowOffset = CGSize(width: 0, height: 2)
        deleteButton.layer.shadowRadius = 3
        deleteButton.layer.shadowOpacity = 0.3
        
        // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ action
        deleteButton.addTarget(self, action: #selector(deleteButtonTapped), for: .touchUpInside)
        
        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ü–û–í–ï–†–• —Ñ–æ—Ç–æ
        contentView.addSubview(deleteButton)
        
        // Constraints - –ª—ñ–≤–∏–π –≤–µ—Ä—Ö–Ω—ñ–π –∫—É—Ç —Ñ–æ—Ç–æ –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
        NSLayoutConstraint.activate([
            deleteButton.widthAnchor.constraint(equalToConstant: 32),
            deleteButton.heightAnchor.constraint(equalToConstant: 32),
            deleteButton.leadingAnchor.constraint(equalTo: itemIV.leadingAnchor, constant: 6),
            deleteButton.topAnchor.constraint(equalTo: itemIV.topAnchor, constant: 6)
        ])
        
        // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞ –ø–µ—Ä–µ–¥–Ω—ñ–π –ø–ª–∞–Ω
        contentView.bringSubviewToFront(deleteButton)
    }
    
    private func setupQuantityControls() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –∑–º–µ–Ω—à–µ–Ω–Ω—è (—Å—Ç–∏–ª—å —è–∫ –Ω–∞ —Å–∞–π—Ç—ñ - –∑–µ–ª–µ–Ω–∞ —Ä–∞–º–∫–∞)
        decreaseButton = UIButton(type: .system)
        decreaseButton.setTitle("‚àí", for: .normal)
        decreaseButton.titleLabel?.font = UIFont.systemFont(ofSize: 22, weight: .regular)
        decreaseButton.setTitleColor(UIColor.systemGreen, for: .normal)
        decreaseButton.setTitleColor(UIColor.systemGray, for: .disabled)
        decreaseButton.backgroundColor = .white
        decreaseButton.layer.borderWidth = 1.5
        decreaseButton.layer.borderColor = UIColor.systemGreen.cgColor
        decreaseButton.layer.cornerRadius = 6
        decreaseButton.addTarget(self, action: #selector(decreaseButtonTapped), for: .touchUpInside)
        decreaseButton.translatesAutoresizingMaskIntoConstraints = false
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –∑–±—ñ–ª—å—à–µ–Ω–Ω—è (—Å—Ç–∏–ª—å —è–∫ –Ω–∞ —Å–∞–π—Ç—ñ - –∑–µ–ª–µ–Ω–∞ —Ä–∞–º–∫–∞)
        increaseButton = UIButton(type: .system)
        increaseButton.setTitle("+", for: .normal)
        increaseButton.titleLabel?.font = UIFont.systemFont(ofSize: 22, weight: .regular)
        increaseButton.setTitleColor(UIColor.systemGreen, for: .normal)
        increaseButton.backgroundColor = .white
        increaseButton.layer.borderWidth = 1.5
        increaseButton.layer.borderColor = UIColor.systemGreen.cgColor
        increaseButton.layer.cornerRadius = 6
        increaseButton.addTarget(self, action: #selector(increaseButtonTapped), for: .touchUpInside)
        increaseButton.translatesAutoresizingMaskIntoConstraints = false
        
        // –ü–æ–∫–∞–∑—É—î–º–æ label –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        counterL.isHidden = false
        counterL.textAlignment = .center
        counterL.font = UIFont.systemFont(ofSize: 14, weight: .medium)
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ stack view –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        quantityStackView = UIStackView(arrangedSubviews: [decreaseButton, counterL, increaseButton])
        quantityStackView.axis = .horizontal
        quantityStackView.spacing = 8
        quantityStackView.alignment = .center
        quantityStackView.distribution = .equalSpacing
        quantityStackView.translatesAutoresizingMaskIntoConstraints = false
        
        contentView.addSubview(quantityStackView)
        
        // Constraints
        NSLayoutConstraint.activate([
            decreaseButton.widthAnchor.constraint(equalToConstant: 30),
            decreaseButton.heightAnchor.constraint(equalToConstant: 30),
            
            counterL.widthAnchor.constraint(greaterThanOrEqualToConstant: 30),
            
            increaseButton.widthAnchor.constraint(equalToConstant: 30),
            increaseButton.heightAnchor.constraint(equalToConstant: 30),
            
            quantityStackView.leadingAnchor.constraint(equalTo: itemIV.trailingAnchor, constant: 13),
            quantityStackView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -10)
        ])
    }
    
    func config(item: ItemBasketModel, row: Int) {
        currentItem = item
        itemIndex = row
        titleL.text = item.title
        
        // –û—á–∏—â–∞—î–º–æ —Ü—ñ–Ω—É –≤—ñ–¥ –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
        let cleanPrice = item.price.replacingOccurrences(of: " ", with: "")
        let price = Double(cleanPrice) ?? 0
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ü—ñ–Ω—É –∑–∞ –æ–¥–∏–Ω–∏—Ü—é
        priceL.text = String(format: "%.0f %@", price, "‚Ç¥")
        
        counterL.text = "\(item.qty) —à—Ç"
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É (—Ü—ñ–Ω–∞ √ó –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
        let totalPrice = price * Double(item.qty)
        sumPriceL.text = String(format: "%.0f %@", totalPrice, "‚Ç¥")
        
        setItemPreviewImageView(image: item.image)
        
        // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É "-" —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å = 1 (–∑—ñ –∑–º—ñ–Ω–æ—é —Å—Ç–∏–ª—é)
        decreaseButton.isEnabled = item.qty > 1
        if item.qty > 1 {
            decreaseButton.layer.borderColor = UIColor.systemGreen.cgColor
            decreaseButton.alpha = 1.0
        } else {
            decreaseButton.layer.borderColor = UIColor.systemGray3.cgColor
            decreaseButton.alpha = 0.5
        }
        
        print("üí∞ [Cell] Configured: \(item.title), price=\(price), qty=\(item.qty), total=\(totalPrice)")
    }
    
    func setItemPreviewImageView(image:String) {
        if let imageCache = SDImageCache.shared.imageFromCache(forKey: image) {
            itemIV.image = imageCache
        } else {
            if let url = URL(string: image) {
                itemIV.sd_setImage(with: url, completed: nil)
            }
        }
    }
    
    @objc private func deleteButtonTapped() {
        // –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ç–æ
        guard let index = itemIndex, let title = titleL.text else { return }
        print("üóëÔ∏è [Cell] Delete button tapped for row \(index)")
        delegate?.removeItem(row: index, itemTitle: title)
    }
    
    @objc private func decreaseButtonTapped() {
        guard let index = itemIndex else { return }
        delegate?.decreaseQuantity(row: index)
    }
    
    @objc private func increaseButtonTapped() {
        guard let index = itemIndex else { return }
        delegate?.increaseQuantity(row: index)
    }
}
