import UIKit
import SDWebImage

protocol BasketViewProtocol: BaseAlert {
    func config()
    func reloadTableView()
    func updateItems()
    func openOrder(string: String)
}

class BasketViewController: BaseViewController<BasketViewModel>, BasketViewProtocol {
    
    @IBOutlet weak var basketTV: UITableView!
    
    @IBOutlet weak var basketV: UIView!
    @IBOutlet weak var basketControlV: UIView!
    
    @IBOutlet weak var buyB: UIButton!
    
    let basketPriceCellInditifer = "BasketPriceCell"
    let basketItemCellInditifer = "BasketItemCell"
    
    var appDelegate = UIApplication.shared.delegate as? AppDelegate
    
    override func viewDidLoad() {
        super.viewDidLoad()
        config()
        
        // ‚úÖ –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ —á–µ—Ä–µ–∑ CartManager
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(cartDidUpdate),
            name: CartManager.cartDidUpdateNotification,
            object: nil
        )
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    // ‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
    @objc func cartDidUpdate() {
        print("üì® [BasketVC] ========================================")
        print("üì® [BasketVC] NOTIFICATION RECEIVED: CartManagerDidUpdate")
        print("üì® [BasketVC] Thread: \(Thread.isMainThread ? "MAIN ‚úÖ" : "BACKGROUND ‚ö†Ô∏è")")
        print("üì® [BasketVC] Calling viewModel.getBasketList()...")
        
        viewModel.getBasketList()
        
        print("üì® [BasketVC] After getBasketList(), list count: \(viewModel.list?.count ?? 0)")
        print("üì® [BasketVC] ========================================")
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // ‚úÖ –í–ê–ñ–õ–ò–í–û: –§—ñ–∫—Å—É—î–º–æ –∫–æ–ª—ñ—Ä –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó (–∑–∞–≤–∂–¥–∏ —á–æ—Ä–Ω–∏–π)
        navigationController?.navigationBar.tintColor = .black
        navigationController?.navigationBar.isHidden = false
        
        // üîÑ –ó–∞–ø–∏—Ç—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ WebView
        print("üîÑ Requesting cart sync from WebView...")
        NotificationCenter.default.post(name: NSNotification.Name("RequestCartSync"), object: nil)
        
        // –ó–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± –¥–∞—Ç–∏ —á–∞—Å JavaScript –∑—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.viewModel.getBasketList()
        }
        
        // ‚úÖ TabBar –∑–∞–≤–∂–¥–∏ –≤–∏–¥–∏–º–∏–π - –Ω–µ —Ö–æ–≤–∞—î–º–æ –π–æ–≥–æ
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        updateItems()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
    }

    func config() {
        basketTV.register(UINib(nibName: "BasketItemCell", bundle: nil), forCellReuseIdentifier: basketItemCellInditifer)
        basketTV.register(UINib(nibName: "BasketPriceCell", bundle: nil), forCellReuseIdentifier: basketPriceCellInditifer)
        
        basketV.roundExtensionCorners(corners: [.topLeft, .topRight], radius: 20.0)
        basketControlV.roundExtensionCorners(corners: [.topLeft, .topRight], radius: 15.0)
        basketV.shadow()
        basketControlV.shadow()
    }
    
    func reloadTableView() {
        print("üîÑ [BasketVC] reloadTableView() - calling basketTV.reloadData()")
        print("üìä [BasketVC] viewModel.list count: \(viewModel.list?.count ?? 0)")
        basketTV.reloadData()
        print("‚úÖ [BasketVC] basketTV.reloadData() completed")
    }
    
    func updateItems() {
        print("üîÑ [BasketVC] updateItems() called")
        reloadTableView()
    }
    
    func openOrder(string: String) {
        if let url = URL(string: string) {
            UIApplication.shared.open(url)
        }
    }
    
    func openOrderInWebView() {
        print("üõí [BasketVC] Opening order page in WebView")
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ WebViewController –ø—Ä–æ–≥—Ä–∞–º–Ω–æ (–±–µ–∑ —Å—Ç–æ—Ä–∏–±–æ—Ä–¥–∞)
        let webVC = WebStoreViewController()
        webVC.urlString = "https://v3magazin.glyanec.net/basket/order"
        webVC.title = "–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        
        // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: TabBar –º–∞—î –∑–∞–ª–∏—à–∞—Ç–∏—Å—å –≤–∏–¥–∏–º–∏–º
        webVC.hidesBottomBarWhenPushed = false
        
        // ‚úÖ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —á–µ—Ä–µ–∑ PUSH ‚Äî tab bar –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–∏–¥–∏–º–∏–º
        navigationController?.pushViewController(webVC, animated: true)
        
        print("‚úÖ [BasketVC] Pushed order WebView to navigation stack")
    }

    @objc func reloadData() {
//        viewModel.getCategoryProducts()
    }
    
    @IBAction func backBAction(_ sender: Any) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
        self.tabBarController?.selectedIndex = 0
    }
    
    @IBAction func buyBAction(_ sender: Any) {
        print("üõí [BasketVC] Buy button tapped")
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫—É
        if let list = viewModel.list, !list.isEmpty {
            // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É WebView
            openOrderInWebView()
        } else {
            // –ü–æ–∫–∞–∑—É—î–º–æ –∞–ª–µ—Ä—Ç —â–æ –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π
            let alert = UIAlertController(
                title: "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π",
                message: "–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
                preferredStyle: .alert
            )
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            self.present(alert, animated: true)
        }
    }
}

extension BasketViewController: BasketPriceCellDelegate {
    func updatePrice(price: Double) {
        let price = String(price)
        buyB.setTitle(String(format: "–û—Ñ–æ—Ä–º–∏—Ç–∏ %@ ", price, "‚Ç¥"), for: .normal)
    }
}

extension BasketViewController: BasketItemCellDelegate {
    func removeItem(row: Int, itemTitle: String) {
        print("üóëÔ∏è [BasketVC] Removing item at row \(row)")
        
        guard let list = viewModel.list, row < list.count else {
            print("‚ö†Ô∏è [BasketVC] Invalid row index")
            return
        }
        
        let item = list[row]
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        let alert = UIAlertController(
            title: "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä?",
            message: "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ \"\(itemTitle)\" –∑ –∫–æ—à–∏–∫–∞?",
            preferredStyle: .actionSheet
        )
        
        alert.addAction(UIAlertAction(title: "–í–∏–¥–∞–ª–∏—Ç–∏", style: .destructive) { [weak self] _ in
            guard let self = self else { return }
            
            print("‚úÖ [BasketVC] User confirmed deletion")
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –î–û –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            let itemsBeforeDelete = self.viewModel.list?.count ?? 0
            
            // ‚úÖ –í–ê–ñ–õ–ò–í–û: –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –≤—ñ–¥ notification, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            NotificationCenter.default.removeObserver(self, name: CartManager.cartDidUpdateNotification, object: nil)
            
            // –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä –∑ CartManager (—Ü–µ –æ–Ω–æ–≤–∏—Ç—å –¥–∞–Ω—ñ)
            CartManager.shared.removeItem(at: row)
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                self.viewModel.getBasketList()
                
                let itemsAfterDelete = self.viewModel.list?.count ?? 0
                print("üßÆ [BasketVC] Before: \(itemsBeforeDelete), After: \(itemsAfterDelete)")
                
                // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é - —Ü–µ –Ω–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–±
                self.basketTV.reloadData()
                print("‚úÖ [BasketVC] Table reloaded after deletion")
                
                // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞–∑–∞–¥ –Ω–∞ notifications
                NotificationCenter.default.addObserver(
                    self,
                    selector: #selector(self.cartDidUpdate),
                    name: CartManager.cartDidUpdateNotification,
                    object: nil
                )
                
                // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ Drupal
                self.syncDeletionWithWebView(itemId: item.id)
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                self.appDelegate?.scheduleNotification(
                    notificationType: "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∫–æ—à–∏–∫–∞",
                    body: itemTitle
                )
            }
        })
        
        alert.addAction(UIAlertAction(title: "–°–∫–∞—Å—É–≤–∞—Ç–∏", style: .cancel))
        
        // –ù–∞ iPad —Ç—Ä–µ–±–∞ –≤–∫–∞–∑–∞—Ç–∏ sourceView –¥–ª—è action sheet
        if let popover = alert.popoverPresentationController {
            popover.sourceView = self.basketTV
            popover.sourceRect = self.basketTV.rectForRow(at: IndexPath(row: row, section: 0))
        }
        
        self.present(alert, animated: true)
    }
    
    private func syncDeletionWithWebView(itemId: Int) {
        print("üîÑ [BasketVC] Syncing deletion with WebView: id=\(itemId)")
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ WebView
        NotificationCenter.default.post(
            name: NSNotification.Name("DeleteCartItem"),
            object: nil,
            userInfo: ["itemId": itemId]
        )
    }
    
    func increaseQuantity(row: Int) {
        print("‚ûï [BasketVC] Increasing quantity for row \(row)")
        
        guard let list = viewModel.list, row < list.count else {
            print("‚ö†Ô∏è [BasketVC] Invalid row index")
            return
        }
        
        let item = list[row]
        let newQty = item.qty + 1
        
        print("   Current qty: \(item.qty), new qty: \(newQty)")
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ CartManager
        CartManager.shared.updateQuantity(for: item.id, quantity: newQty)
        
        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ Drupal (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        syncQuantityWithWebView(itemId: item.id, newQuantity: newQty)
    }
    
    func decreaseQuantity(row: Int) {
        print("‚ûñ [BasketVC] Decreasing quantity for row \(row)")
        
        guard let list = viewModel.list, row < list.count else {
            print("‚ö†Ô∏è [BasketVC] Invalid row index")
            return
        }
        
        let item = list[row]
        
        // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–º–µ–Ω—à–∏—Ç–∏ –Ω–∏–∂—á–µ 1
        if item.qty <= 1 {
            print("‚ö†Ô∏è [BasketVC] Cannot decrease below 1")
            return
        }
        
        let newQty = item.qty - 1
        
        print("   Current qty: \(item.qty), new qty: \(newQty)")
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ CartManager
        CartManager.shared.updateQuantity(for: item.id, quantity: newQty)
        
        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ Drupal (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        syncQuantityWithWebView(itemId: item.id, newQuantity: newQty)
    }
    
    private func syncQuantityWithWebView(itemId: Int, newQuantity: Int) {
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ WebView
        print("üîÑ [BasketVC] Syncing quantity with WebView: id=\(itemId), qty=\(newQuantity)")
        
        NotificationCenter.default.post(
            name: NSNotification.Name("UpdateCartQuantity"),
            object: nil,
            userInfo: ["itemId": itemId, "quantity": newQuantity]
        )
    }
}
