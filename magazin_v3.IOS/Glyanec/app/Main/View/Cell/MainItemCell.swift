import UIKit
import SDWebImage
import UserNotifications

class MainItemCell: UICollectionViewCell, BaseAlert, UNUserNotificationCenterDelegate  {
    
    @IBOutlet weak var discountV: UIView!
    @IBOutlet weak var itemIV: UIImageView!
    @IBOutlet weak var discountLabel: UILabel!
    @IBOutlet weak var itemTitleLabel: UILabel!
    @IBOutlet weak var oldPriceLabel: UILabel!
    @IBOutlet weak var newPriceLabel: UILabel!
    @IBOutlet weak var favoriteButton: UIButton!
    @IBOutlet weak var buyButton: UIButton!
    
    var item: ResultProductModel!
    var appDelegate = UIApplication.shared.delegate as? AppDelegate
    
    override func awakeFromNib() {
        super.awakeFromNib()
        updateFavoriteIcon() // –∫–æ–ª–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è
    }

    func config(item: ResultProductModel) {
        self.item = item
        itemTitleLabel.text = item.title
        newPriceLabel.text = String(format: "%@ %@", String(item.price ?? 0), "‚Ç¥")
        
        if let old = item.price_old, old != 0 {
            oldPriceLabel.text = String(format: "%@ %@", String(old), "‚Ç¥")
            discountLabel.text = "-5%"
            discountLabel.isHidden = false
            oldPriceLabel.isHidden = false
            discountV.isHidden = false
        } else {
            oldPriceLabel.isHidden = true
            discountLabel.isHidden = true
            discountV.isHidden = true
        }

        if let images = item.images, let first = images.first {
            setItemPreviewImageView(image: first)
        }
        updateFavoriteIcon()
    }
    
    func setItemPreviewImageView(image: String) {
        if let cached = SDImageCache.shared.imageFromCache(forKey: image) {
            itemIV.image = cached
        } else if let url = URL(string: image) {
            itemIV.sd_setImage(with: url)
        }
    }

    // MARK: - Favorite logic
    @IBAction func folowItemAction(_ sender: Any) {
        guard let id = item?.id else { return }
        var favorites: [ItemBasketModel] = []
        if let data = UserDefaults.standard.value(forKey: "ItemFavoriteModel") as? Data {
            favorites = (try? PropertyListDecoder().decode([ItemBasketModel].self, from: data)) ?? []
        }

        if let index = favorites.firstIndex(where: { String($0.id) == id }) {
            favorites.remove(at: index)
            appDelegate?.scheduleNotification(notificationType: "–í–∏–¥–∞–ª–µ–Ω–æ –∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ", body: item.title ?? "")
        } else {
            let imageStr = item.images?.first ?? ""
            favorites.append(
                ItemBasketModel(id: Int(id) ?? 0,
                                title: item.title ?? "",
                                price: String(item.price ?? 0),
                                image: imageStr,
                                qty: 1)
            )
            appDelegate?.scheduleNotification(notificationType: "–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ —É –≤–∏–±—Ä–∞–Ω–µ", body: item.title ?? "")
        }

        UserDefaults.standard.set(try? PropertyListEncoder().encode(favorites), forKey: "ItemFavoriteModel")
        updateFavoriteIcon()
    }

    @IBAction func buyItemAction(_ sender: Any) {
    guard let item = self.item else {
        print("‚ö†Ô∏è Item = nil ‚Äî –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫")
        return
    }
    
    let itemId = Int(item.id ?? "") ?? 0
    let imageString = item.images?.first ?? ""
    var list: [ItemBasketModel] = []
    var listBasket: [BasketModel] = []
    
    // 1Ô∏è‚É£ –ó—á–∏—Ç—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ UserDefaults
    if let data = UserDefaults.standard.value(forKey: "ItemBasketModel") as? Data {
        list = (try? PropertyListDecoder().decode([ItemBasketModel].self, from: data)) ?? []
    }
    if let data = UserDefaults.standard.value(forKey: "BasketModel") as? Data {
        listBasket = (try? PropertyListDecoder().decode([BasketModel].self, from: data)) ?? []
    }

    // 2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä —É–∂–µ —î –≤ –∫–æ—à–∏–∫—É
    if list.contains(where: { $0.id == itemId }) {
        print("üõí \(item.title ?? "") –≤–∂–µ —î –≤ –∫–æ—à–∏–∫—É ‚Äî –Ω–µ –¥—É–±–ª—é—î–º–æ")
        return
    }

    // 3Ô∏è‚É£ –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
    list.append(
        ItemBasketModel(id: itemId,
                        title: item.title ?? "",
                        price: String(item.price ?? 0),
                        image: imageString,
                        qty: 1)
    )
    listBasket.append(BasketModel(id: itemId, qty: 1))
    
    // 4Ô∏è‚É£ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–∞–¥ —É UserDefaults
    UserDefaults.standard.set(try? PropertyListEncoder().encode(list), forKey: "ItemBasketModel")
    UserDefaults.standard.set(try? PropertyListEncoder().encode(listBasket), forKey: "BasketModel")

    // 5Ô∏è‚É£ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ª–æ–≥ —É –∫–æ–Ω—Å–æ–ª—å
    self.appDelegate?.scheduleNotification(notificationType: "–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫", body: item.title ?? "")
    print("‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫:", item.title ?? "")
}


    private func updateFavoriteIcon() {
        guard let id = item?.id else { return }
        var favorites: [ItemBasketModel] = []
        if let data = UserDefaults.standard.value(forKey: "ItemFavoriteModel") as? Data {
            favorites = (try? PropertyListDecoder().decode([ItemBasketModel].self, from: data)) ?? []
        }

        let isFav = favorites.contains { String($0.id) == id }
        let imageName = isFav ? "heartFavorite" : "heartUnFavorite"
        favoriteButton.setImage(UIImage(named: imageName), for: .normal)
    }
}
