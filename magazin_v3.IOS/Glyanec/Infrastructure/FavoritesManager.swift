import Foundation

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ "–í–ø–æ–¥–æ–±–∞–π–∫–∞–º–∏" (Favorites) —á–µ—Ä–µ–∑ Drupal API
final class FavoritesManager {
    
    static let shared = FavoritesManager()
    
    // Notification –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
    static let favoritesDidUpdateNotification = Notification.Name("FavoritesManagerDidUpdate")
    
    private let apiURL = URL(string: "https://v3magazin.glyanec.net/api/drupal_package_like/like")!
    private let defaultsKey = "favoriteProductIDs"
    
    private init() {
        print("‚úÖ [FavoritesManager] Initialized")
    }
    
    // MARK: - Storage
    
    private var storedIDs: [Int] {
        get {
            UserDefaults.standard.array(forKey: defaultsKey) as? [Int] ?? []
        }
        set {
            UserDefaults.standard.setValue(newValue, forKey: defaultsKey)
            print("üíæ [FavoritesManager] Saved \(newValue.count) favorite IDs")
        }
    }
    
    // MARK: - Public Methods
    
    /// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–æ–≤–∞—Ä –≤ –æ–±—Ä–∞–Ω–æ–º—É
    func isFavorite(_ id: Int) -> Bool {
        return storedIDs.contains(id)
    }
    
    /// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É "–æ–±—Ä–∞–Ω–µ" –¥–ª—è —Ç–æ–≤–∞—Ä—É
    func toggleFavorite(for id: Int, completion: @escaping (Bool) -> Void) {
        let isCurrentlyFavorite = isFavorite(id)
        let adding = !isCurrentlyFavorite
        
        print("‚ù§Ô∏è [FavoritesManager] Toggling favorite for ID \(id): \(adding ? "ADD" : "REMOVE")")
        
        let body: [String: Any] = [
            "d_p_l": [
                "entity_type": "node",
                "entity_id": "\(id)",
                "like_type": "favorites",
                "like_subtype": adding ? "add" : "remove",
                "count": "0",
                "texts": [
                    "on": "–í –æ–±—Ä–∞–Ω–µ",
                    "off": "–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ"
                ],
                "class": ["favorite_button"],
                "tag": "a"
            ]
        ]
        
        var request = URLRequest(url: apiURL)
        request.httpMethod = "POST"
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –î–æ–¥–∞—î–º–æ cookies –∑ WebView –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        if let cookies = HTTPCookieStorage.shared.cookies {
            let cookieHeader = HTTPCookie.requestHeaderFields(with: cookies)
            for (key, value) in cookieHeader {
                request.addValue(value, forHTTPHeaderField: key)
            }
        }
        
        URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
            guard let self = self else { return }
            
            if let error = error {
                print("‚ùå [FavoritesManager] Error: \(error.localizedDescription)")
                DispatchQueue.main.async { completion(false) }
                return
            }
            
            guard let http = response as? HTTPURLResponse else {
                print("‚ùå [FavoritesManager] Invalid response")
                DispatchQueue.main.async { completion(false) }
                return
            }
            
            print("üì° [FavoritesManager] Response status: \(http.statusCode)")
            
            if http.statusCode == 200 {
                DispatchQueue.main.async {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
                    var ids = self.storedIDs
                    
                    if adding {
                        if !ids.contains(id) {
                            ids.append(id)
                        }
                    } else {
                        ids.removeAll { $0 == id }
                    }
                    
                    self.storedIDs = ids
                    
                    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ notification
                    NotificationCenter.default.post(
                        name: FavoritesManager.favoritesDidUpdateNotification,
                        object: nil
                    )
                    
                    print("‚úÖ [FavoritesManager] Updated successfully")
                    completion(true)
                }
            } else {
                print("‚ö†Ô∏è [FavoritesManager] Unexpected status code: \(http.statusCode)")
                DispatchQueue.main.async { completion(false) }
            }
        }.resume()
    }
    
    /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ ID –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
    func getAllFavorites() -> [Int] {
        return storedIDs
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≤–ø–æ–¥–æ–±–∞–π–∫–∏
    func clearAll() {
        print("üóëÔ∏è [FavoritesManager] Clearing all favorites")
        storedIDs = []
        NotificationCenter.default.post(
            name: FavoritesManager.favoritesDidUpdateNotification,
            object: nil
        )
    }
    
    /// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    func syncWithServer(completion: @escaping ([Int]?) -> Void) {
        // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑ /user/favorites —á–µ—Ä–µ–∑ HTML parsing
        // –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        completion(storedIDs)
    }
}

