package com.glyanec.shop.fragments

import android.annotation.SuppressLint
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.webkit.JavascriptInterface
import android.webkit.WebChromeClient
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.fragment.app.Fragment
import com.glyanec.shop.data.CartManager
import com.glyanec.shop.data.ItemBasketModel
import org.json.JSONArray
import org.json.JSONObject

class WebViewFragment : Fragment() {
    
    private lateinit var webView: WebView
    private lateinit var cartManager: CartManager
    
    companion object {
        private const val TAG = "WebViewFragment"
        private const val ARG_URL = "url"
        
        fun newInstance(url: String): WebViewFragment {
            return WebViewFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_URL, url)
                }
            }
        }
    }
    
    private fun getUrl(): String {
        return requireArguments().getString(ARG_URL)!!
    }
    
    @SuppressLint("SetJavaScriptEnabled")
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        cartManager = CartManager(requireContext())
        val urlToLoad = getUrl()
        
        webView = WebView(requireContext()).apply {
            settings.apply {
                javaScriptEnabled = true
                domStorageEnabled = true
                databaseEnabled = true
                setSupportZoom(true)
                builtInZoomControls = true
                displayZoomControls = false
                useWideViewPort = true
                loadWithOverviewMode = true
            }
            
            // –î–æ–¥–∞—î–º–æ JavaScript Interface
            addJavascriptInterface(CartJavascriptInterface(), "cartHandler")
            
            webViewClient = object : WebViewClient() {
                override fun onPageFinished(view: WebView?, url: String?) {
                    super.onPageFinished(view, url)
                    // –Ü–Ω–∂–µ–∫—Ç—É—î–º–æ JavaScript –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                    injectCartSyncScript()
                }
            }
            
            webChromeClient = WebChromeClient()
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ URL
            loadUrl(urlToLoad)
        }
        
        return webView
    }
    
    private fun injectCartSyncScript() {
        val javascript = """
        console.log('üîß [Drupal Cart Integration] Starting...');
        
        // ‚úÖ 1. –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è XMLHttpRequest (Drupal –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î jQuery AJAX)
        (function() {
            const originalOpen = XMLHttpRequest.prototype.open;
            const originalSend = XMLHttpRequest.prototype.send;
            
            XMLHttpRequest.prototype.open = function(method, url) {
                this._url = url;
                this._method = method;
                return originalOpen.apply(this, arguments);
            };
            
            XMLHttpRequest.prototype.send = function(data) {
                const xhr = this;
                
                xhr.addEventListener('load', function() {
                    if (xhr._url && (xhr._url.includes('/basket/api-add') || xhr._url.includes('/basket/api-load_popup'))) {
                        console.log('üõí [Drupal Cart] API call detected:', xhr._url);
                        
                        try {
                            const responseData = JSON.parse(xhr.responseText);
                            
                            if (window.cartHandler) {
                                window.cartHandler.onCartDataReceived(JSON.stringify({
                                    type: 'xhr_call',
                                    url: xhr._url,
                                    method: xhr._method,
                                    data: responseData
                                }));
                            }
                        } catch (e) {
                            console.error('Error parsing XHR response:', e);
                        }
                    }
                });
                
                return originalSend.apply(this, arguments);
            };
        })();
        
        // ‚úÖ 2. –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫"
        function setupDrupalCartHandler() {
            console.log('üîç [Drupal] Searching for .addto_basket_button...');
            
            const buttons = document.querySelectorAll('.addto_basket_button, a[onclick*="basket_ajax_link"]');
            
            console.log('‚úÖ [Drupal] Found ' + buttons.length + ' cart buttons');
            
            buttons.forEach(function(button) {
                if (!button.dataset.nativeHandlerAttached) {
                    button.dataset.nativeHandlerAttached = 'true';
                    
                    button.addEventListener('click', function(event) {
                        console.log('üñ±Ô∏è [Drupal] Cart button clicked');
                        
                        // –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ Drupal –æ–Ω–æ–≤–∏—Ç—å –∫–æ—à–∏–∫, —ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ
                        setTimeout(() => {
                            syncCartWithNative();
                        }, 800);
                    }, false);
                }
            });
        }
        
        // ‚úÖ 3. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–æ—à–∏–∫–∞ - –≤–∏–∫–ª–∏–∫–∞—î Drupal API –Ω–∞–ø—Ä—è–º—É
        function syncCartWithNative() {
            console.log('üîÑ [Drupal] Syncing cart with native app...');
            
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ Drupal endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—à–∏–∫–∞
            fetch('/basket/api-load_popup?_wrapper_format=drupal_ajax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'load_popup=basket_view'
            })
            .then(response => response.json())
            .then(data => {
                console.log('‚úÖ [Drupal] Cart data received from API');
                
                if (window.cartHandler) {
                    window.cartHandler.onCartDataReceived(JSON.stringify({
                        type: 'drupal_cart_sync',
                        data: data
                    }));
                }
            })
            .catch(err => {
                console.error('‚ùå [Drupal] Error syncing cart:', err);
            });
        }
        
        // ‚úÖ 4. –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–ª–∏–∫—É –∑ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥—É
        window.syncCartWithNative = syncCartWithNative;
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        setupDrupalCartHandler();
        
        // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –∑–º—ñ–Ω–∞–º–∏ DOM (–¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ –¥–æ–¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫)
        const observer = new MutationObserver(() => {
            setupDrupalCartHandler();
        });
        observer.observe(document.body, { childList: true, subtree: true });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∫–æ—à–∏–∫ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        setTimeout(syncCartWithNative, 1500);
        
        console.log('‚úÖ [Drupal Cart Integration] Completed');
        """
        
        webView.evaluateJavascript(javascript) { result ->
            Log.d(TAG, "‚úÖ JavaScript injected successfully")
        }
    }
    
    fun syncCart() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ WebView –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
        if (!::webView.isInitialized) {
            Log.d(TAG, "‚ö†Ô∏è WebView not initialized yet, skipping sync")
            return
        }
        
        webView.evaluateJavascript("if (typeof syncCartWithNative === 'function') { syncCartWithNative(); }") { 
            Log.d(TAG, "üîÑ Cart sync triggered")
        }
    }
    
    inner class CartJavascriptInterface {
        @JavascriptInterface
        fun onCartDataReceived(jsonData: String) {
            Log.d(TAG, "üì® Received cart data from JavaScript")
            
            try {
                val json = JSONObject(jsonData)
                val type = json.optString("type")
                
                Log.d(TAG, "üìã Message type: $type")
                
                when (type) {
                    "drupal_cart_sync", "xhr_call" -> {
                        handleDrupalCartSync(json)
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error parsing cart data", e)
            }
        }
        
        private fun handleDrupalCartSync(json: JSONObject) {
            Log.d(TAG, "üîÑ Handling Drupal cart sync...")
            
            try {
                val dataObj = json.optJSONObject("data")
                val commands = dataObj?.optJSONArray("commands") ?: 
                              json.optJSONArray("data") ?: return
                
                Log.d(TAG, "üì¶ Processing ${commands.length()} Drupal commands")
                
                // –®—É–∫–∞—î–º–æ magnificPopup –∑ HTML –∫–æ—à–∏–∫–∞
                for (i in 0 until commands.length()) {
                    val command = commands.getJSONObject(i)
                    val commandType = command.optString("command")
                    
                    Log.d(TAG, "üîß Command: $commandType")
                    
                    if (commandType == "magnificPopup") {
                        val html = command.optString("html")
                        if (html.isNotEmpty()) {
                            Log.d(TAG, "üé™ Found cart HTML in magnificPopup")
                            parseCartHTML(html)
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error handling cart sync", e)
            }
        }
        
        private fun parseCartHTML(html: String) {
            Log.d(TAG, "üìÑ Parsing Drupal cart HTML...")
            Log.d(TAG, "üìÑ HTML length: ${html.length} characters")
            
            val items = mutableListOf<ItemBasketModel>()
            
            // Regex –¥–ª—è –ø–æ—à—É–∫—É –±–ª–æ–∫—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤
            val rowPattern = """<div class="goods-cart-row">[\s\S]*?(?=<div class="goods-cart-row">|<div class="view-footer">|$)""".toRegex()
            val matches = rowPattern.findAll(html)
            
            matches.forEachIndexed { index, match ->
                val rowHTML = match.value
                Log.d(TAG, "üì¶ Processing item ${index + 1}...")
                
                try {
                    // 1. ID —Ç–æ–≤–∞—Ä—É
                    val idPattern = """(?:&quot;delete_item&quot;:&quot;(\d+)&quot;|&quot;update_id&quot;:&quot;(\d+)&quot;|"delete_item":"(\d+)"|"update_id":"(\d+)")""".toRegex()
                    val idMatch = idPattern.find(rowHTML)
                    val id = (idMatch?.groups?.firstOrNull { it != null && it.value.toIntOrNull() != null }?.value?.toIntOrNull()
                        ?: index + 1000)
                    
                    // 2. –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
                    val titlePattern = """goods-cart-row__title[^>]*>[\s\S]*?<a[^>]*>(.*?)</a>""".toRegex()
                    val title = titlePattern.find(rowHTML)?.groups?.get(1)?.value?.trim() ?: "–¢–æ–≤–∞—Ä #$id"
                    
                    // 3. –¶—ñ–Ω–∞
                    val pricePattern = """<div class="sum">\s*([0-9 ]+)\s*–≥—Ä–Ω""".toRegex()
                    val price = pricePattern.find(rowHTML)?.groups?.get(1)?.value?.replace(" ", "") ?: "0"
                    
                    // 4. –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    val imagePattern = """<img[^>]*src="([^"]+)"""".toRegex()
                    var image = imagePattern.find(rowHTML)?.groups?.get(1)?.value ?: ""
                    if (image.startsWith("/")) {
                        image = "https://v3magazin.glyanec.net$image"
                    }
                    
                    // 5. –ö—ñ–ª—å–∫—ñ—Å—Ç—å
                    val qtyPattern = """<input[^>]*class="count_input"[^>]*value="(\d+)"""".toRegex()
                    val qty = qtyPattern.find(rowHTML)?.groups?.get(1)?.value?.toIntOrNull() ?: 1
                    
                    val item = ItemBasketModel(
                        id = id,
                        title = title,
                        price = price,
                        image = image,
                        qty = qty
                    )
                    
                    items.add(item)
                    Log.d(TAG, "‚úÖ Item ${index + 1} parsed: $title x$qty (id: $id)")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error parsing item ${index + 1}", e)
                }
            }
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ CartManager
            activity?.runOnUiThread {
                Log.d(TAG, "üîÑ Replacing cart with ${items.size} items")
                cartManager.saveCartItems(items)
                Log.d(TAG, "‚úÖ Cart saved successfully")
            }
        }
    }
    
    fun canGoBack(): Boolean {
        return if (::webView.isInitialized) webView.canGoBack() else false
    }
    
    fun goBack() {
        if (::webView.isInitialized) {
            webView.goBack()
        }
    }
    
    fun executeJavaScript(script: String) {
        if (!::webView.isInitialized) {
            Log.d(TAG, "‚ö†Ô∏è WebView not initialized yet, skipping JavaScript execution")
            return
        }
        
        webView.evaluateJavascript(script) { result ->
            Log.d(TAG, "JavaScript executed")
        }
    }
}
